name: Unit Tests with Coverage

on:
  push:
    branches:
      - main
      - master
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests-coverage:
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)

    env:
      CC: gcc
      CXX: g++
      FC: gfortran
      MPI_HOME: /usr

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: git cmake make ninja-build gcc g++ gfortran jq lcov libopenblas-dev libsuitesparse-dev libfftw3-dev libgsl-dev libhdf5-dev libnetcdf-dev libnetcdff-dev python3-dev
          version: 1.0

      - name: Install MPI packages separately
        run: |
          sudo apt-get update
          sudo apt-get install -y openmpi-bin openmpi-common libopenmpi-dev

      - name: Set up Python 3
        run: |
          python -m pip install --upgrade pip
          pip install numpy lcov-cobertura



      - name: Build NEO-2 with coverage flags
        run: |
          cmake --preset default -DCMAKE_BUILD_TYPE=Coverage
          cmake --build --preset default

      - name: Run unit tests with coverage
        run: |
          make test

      - name: Generate coverage report
        run: |
          # Capture coverage data
          cd build && lcov --capture --directory . --output-file coverage.info \
            --rc branch_coverage=1 \
            --rc geninfo_unexecuted_blocks=1 \
            --ignore-errors inconsistent,mismatch,empty,unused
          
          # Filter coverage data to include only source code
          lcov --remove coverage.info \
            '*/build/*' \
            '*/TEST/*' \
            '*/libneo/*' \
            '*/thirdparty/*' \
            '*/DOC/*' \
            '*/MULTI-SPEC-TOOLS/*' \
            '*/tools/*' \
            '/usr/*' \
            '/tmp/*' \
            --output-file coverage_filtered.info \
            --rc branch_coverage=1 \
            --ignore-errors unused,empty
          
          # Generate XML for Codecov
          lcov_cobertura coverage_filtered.info -o coverage.xml
          
          # Show coverage summary
          echo "=== Coverage Summary ===" >> $GITHUB_STEP_SUMMARY
          lcov --summary coverage_filtered.info >> $GITHUB_STEP_SUMMARY || echo "No coverage data found" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./build/coverage.xml
          flags: unittests
          name: unit-tests-coverage
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            build/coverage.info
            build/coverage_filtered.info
            build/coverage.xml
          retention-days: 7